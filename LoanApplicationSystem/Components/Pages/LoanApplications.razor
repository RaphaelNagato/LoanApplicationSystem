@page "/loanapplications"
@using Core.DTOs
@using Core.Entities
@inject Infrastructure.Services.ILoanApplicationService LoanService
@inject ILogger<LoanApplications> Logger
@implements IDisposable

<h3>Loan Applications</h3>

<div class="row mb-3">
    <div class="col-md-4">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by applicant name..." 
                   @bind="SearchTerm" @bind:event="oninput" />
            <button class="btn btn-outline-secondary" type="button">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="SelectedStatus">
            <option value="">All Statuses</option>
            @foreach (var status in Enum.GetValues(typeof(LoanApplicationStatus)))
            {
                <option value="@status">@status</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <select class="form-select" @bind="PageSize">
            <option value="5">5 per page</option>
            <option value="10">10 per page</option>
            <option value="20">20 per page</option>
            <option value="50">50 per page</option>
        </select>
    </div>
    <div class="col-md-3 text-end">
        <button class="btn btn-primary" @onclick="ShowAddForm">Add New Loan Application</button>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    @if (paginationResult?.Items.Any() == true)
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Applicant Name</th>
                        <th>Loan Amount</th>
                        <th>Loan Term (Months)</th>
                        <th>Interest Rate</th>
                        <th>Status</th>
                        <th>Application Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var loan in paginationResult.Items)
                    {
                        <tr>
                            <td>@loan.Id</td>
                            <td>@loan.ApplicantName</td>
                            <td>@loan.LoanAmount.ToString("C")</td>
                            <td>@loan.LoanTermMonths</td>
                            <td>@loan.InterestRate.ToString("F2")%</td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(loan.LoanStatus)">@loan.LoanStatus</span>
                            </td>
                            <td>@loan.ApplicationDate.LocalDateTime.ToShortDateString()</td>
                            <td>
                                <button class="btn btn-sm btn-warning me-1" @onclick="() => EditLoan(loan)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteLoan(loan.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (paginationResult.TotalPages > 1)
        {
            <nav aria-label="Loan applications pagination">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(paginationResult.HasPreviousPage ? "" : "disabled")">
                        <button class="page-link" @onclick="() => ChangePage(paginationResult.PageNumber - 1)" disabled="@(!paginationResult.HasPreviousPage)">
                            Previous
                        </button>
                    </li>
                    
                    @for (int i = Math.Max(1, paginationResult.PageNumber - 2); i <= Math.Min(paginationResult.TotalPages, paginationResult.PageNumber + 2); i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(pageNumber == paginationResult.PageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                        </li>
                    }
                    
                    <li class="page-item @(paginationResult.HasNextPage ? "" : "disabled")">
                        <button class="page-link" @onclick="() => ChangePage(paginationResult.PageNumber + 1)" disabled="@(!paginationResult.HasNextPage)">
                            Next
                        </button>
                    </li>
                </ul>
            </nav>
        }

        <div class="text-center text-muted">
            Showing @((paginationResult.PageNumber - 1) * paginationResult.PageSize + 1) to 
            @Math.Min(paginationResult.PageNumber * paginationResult.PageSize, paginationResult.TotalCount) 
            of @paginationResult.TotalCount entries
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-info-circle"></i> No loan applications found matching your criteria.
        </div>
    }
}

@if (showForm)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editMode) ? "Edit" : "Add") Loan Application</h5>
                    <button type="button" class="btn-close" @onclick="CancelForm"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentDto" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Applicant Name</label>
                                <InputText class="form-control" @bind-Value="currentDto.ApplicantName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Loan Amount</label>
                                <InputNumber class="form-control" @bind-Value="currentDto.LoanAmount" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Loan Term (Months)</label>
                                <InputNumber class="form-control" @bind-Value="currentDto.LoanTermMonths" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Interest Rate</label>
                                <InputNumber class="form-control" @bind-Value="currentDto.InterestRate" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <InputSelect class="form-control" @bind-Value="currentDto.LoanStatus">
                                @foreach (var status in Enum.GetValues(typeof(LoanApplicationStatus)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Application Date</label>
                            <InputDate class="form-control" @bind-Value="currentDto.ApplicationDate" />
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-success me-2" type="submit">@((editMode) ? "Update" : "Add")</button>
                            <button class="btn btn-secondary" type="button" @onclick="CancelForm">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private PaginationResult<LoanApplicationDto>? paginationResult;
    private LoanApplicationDto currentDto = new();
    private bool showForm = false;
    private bool editMode = false;
    private bool isLoading = true;
    private CancellationTokenSource _cancellationTokenSource = new();

    // Filtering and pagination parameters
    private string? searchTerm;
    private LoanApplicationStatus? selectedStatus;
    private int currentPage = 1;
    private int pageSize = 10;
    private Timer? searchTimer;

    private string? SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                searchTimer?.Dispose();
                searchTimer = new Timer(async _ =>
                {
                    await InvokeAsync(HandleSearch);
                }, null, 500, Timeout.Infinite);
            }
        }
    }
    
    private LoanApplicationStatus? SelectedStatus
    {
        get => selectedStatus;
        set
        {
            if (selectedStatus != value)
            {
                selectedStatus = value;
                _ = HandleSearch();
            }
        }
    }

    private int PageSize
    {
        get => pageSize;
        set
        {
            if (pageSize != value)
            {
                pageSize = value;
                _ = HandlePageSizeChange();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("Initializing Loan Applications page");
        await LoadLoans();
    }

    private async Task LoadLoans()
    {
        try
        {
            Logger.LogDebug("Loading loan applications with page: {CurrentPage}, size: {PageSize}, term: '{SearchTerm}', status: {SelectedStatus}", currentPage, pageSize, searchTerm, selectedStatus);
            isLoading = true;
            paginationResult = await LoanService.GetPaginatedAsync(searchTerm, selectedStatus, currentPage, pageSize, _cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            Logger.LogDebug("Loan loading operation was cancelled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading loan applications");
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleSearch()
    {
        currentPage = 1; 
        await LoadLoans();
    }

    private async Task HandlePageSizeChange()
    {
        currentPage = 1;
        await LoadLoans();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= (paginationResult?.TotalPages ?? 1))
        {
            currentPage = page;
            await LoadLoans();
        }
    }

    private string GetStatusBadgeClass(LoanApplicationStatus status) => status switch
    {
        LoanApplicationStatus.Pending => "bg-warning text-dark",
        LoanApplicationStatus.Approved => "bg-success",
        LoanApplicationStatus.Rejected => "bg-danger",
        _ => "bg-secondary"
    };

    private void ShowAddForm()
    {
        Logger.LogDebug("User initiated add loan application form");
        currentDto = new LoanApplicationDto();
        editMode = false;
        showForm = true;
    }

    private void EditLoan(LoanApplicationDto loan)
    {
        Logger.LogDebug("User initiated edit for loan application ID: {LoanId}", loan.Id);
        currentDto = loan;
        editMode = true;
        showForm = true;
    }

    private async Task DeleteLoan(int id)
    {
        try
        {
            Logger.LogDebug("User initiated delete for loan application ID: {LoanId}", id);
            await LoanService.DeleteAsync(id, _cancellationTokenSource.Token);
            await LoadLoans();
        }
        catch (OperationCanceledException)
        {
            Logger.LogDebug("Delete operation was cancelled for loan application ID: {LoanId}", id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting loan application ID: {LoanId}", id);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (editMode)
            {
                Logger.LogDebug("User submitted update for loan application ID: {LoanId}", currentDto.Id);
                await LoanService.UpdateAsync(currentDto.Id, currentDto, _cancellationTokenSource.Token);
            }
            else
            {
                Logger.LogDebug("User submitted new loan application for applicant: {ApplicantName}", currentDto.ApplicantName);
                await LoanService.AddAsync(currentDto, _cancellationTokenSource.Token);
            }
            showForm = false;
            await LoadLoans();
        }
        catch (OperationCanceledException)
        {
            Logger.LogDebug("Form submission operation was cancelled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing loan application form submission");
        }
    }

    private void CancelForm()
    {
        Logger.LogDebug("User cancelled loan application form");
        showForm = false;
    }

    public void Dispose()
    {
        Logger.LogDebug("Disposing Loan Applications component");
        searchTimer?.Dispose();
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
} 