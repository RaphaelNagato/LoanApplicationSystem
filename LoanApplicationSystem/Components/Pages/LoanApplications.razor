@page "/loanapplications"
@using LoanApplicationSystem.DTOs
@using Core.Entities
@inject Infrastructure.Services.ILoanApplicationService LoanService
@inject ILogger<LoanApplications> Logger
@implements IDisposable

<h3>Loan Applications</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="ShowAddForm">Add New Loan Application</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Applicant Name</th>
                <th>Loan Amount</th>
                <th>Loan Term (Months)</th>
                <th>Interest Rate</th>
                <th>Status</th>
                <th>Application Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var loan in loanDtos)
            {
                <tr>
                    <td>@loan.Id</td>
                    <td>@loan.ApplicantName</td>
                    <td>@loan.LoanAmount.ToString("C")</td>
                    <td>@loan.LoanTermMonths</td>
                    <td>@loan.InterestRate.ToString("F2")%</td>
                    <td>@loan.LoanStatus</td>
                    <td>@loan.ApplicationDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => EditLoan(loan)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteLoan(loan.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showForm)
{
    <EditForm Model="currentDto" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Applicant Name</label>
            <InputText class="form-control" @bind-Value="currentDto.ApplicantName" />
        </div>
        <div class="mb-2">
            <label>Loan Amount</label>
            <InputNumber class="form-control" @bind-Value="currentDto.LoanAmount" />
        </div>
        <div class="mb-2">
            <label>Loan Term (Months)</label>
            <InputNumber class="form-control" @bind-Value="currentDto.LoanTermMonths" />
        </div>
        <div class="mb-2">
            <label>Interest Rate</label>
            <InputNumber class="form-control" @bind-Value="currentDto.InterestRate" />
        </div>
        <div class="mb-2">
            <label>Status</label>
            <InputSelect class="form-control" @bind-Value="currentDto.LoanStatus">
                @foreach (var status in Enum.GetValues(typeof(LoanApplicationStatus)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>
        <button class="btn btn-success me-2" type="submit">@((editMode) ? "Update" : "Add")</button>
        <button class="btn btn-secondary" type="button" @onclick="CancelForm">Cancel</button>
    </EditForm>
}

@code {
    private List<LoanApplicationDto> loanDtos = new();
    private LoanApplicationDto currentDto = new();
    private bool showForm = false;
    private bool editMode = false;
    private bool isLoading = true;
    private CancellationTokenSource _cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("Initializing Loan Applications page");
        await LoadLoans();
    }

    private async Task LoadLoans()
    {
        try
        {
            Logger.LogDebug("Loading loan applications");
            isLoading = true;
            var entities = await LoanService.GetAllAsync(_cancellationTokenSource.Token);
            loanDtos = LoanApplicationDto.FromEntities(entities).ToList();
        }
        catch (OperationCanceledException)
        {
            Logger.LogDebug("Loan loading operation was cancelled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading loan applications");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddForm()
    {
        Logger.LogDebug("User initiated add loan application form");
        currentDto = new LoanApplicationDto
        {
            ApplicationDate = DateTime.Now,
            LoanStatus = LoanApplicationStatus.Pending
        };
        editMode = false;
        showForm = true;
    }

    private void EditLoan(LoanApplicationDto loan)
    {
        Logger.LogDebug("User initiated edit for loan application ID: {LoanId}", loan.Id);
        currentDto = new LoanApplicationDto
        {
            Id = loan.Id,
            ApplicantName = loan.ApplicantName,
            LoanAmount = loan.LoanAmount,
            LoanTermMonths = loan.LoanTermMonths,
            InterestRate = loan.InterestRate,
            LoanStatus = loan.LoanStatus,
            ApplicationDate = loan.ApplicationDate
        };
        editMode = true;
        showForm = true;
    }

    private async Task DeleteLoan(int id)
    {
        try
        {
            Logger.LogDebug("User initiated delete for loan application ID: {LoanId}", id);
            await LoanService.DeleteAsync(id, _cancellationTokenSource.Token);
            await LoadLoans();
        }
        catch (OperationCanceledException)
        {
            Logger.LogDebug("Delete operation was cancelled for loan application ID: {LoanId}", id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting loan application ID: {LoanId}", id);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var loanApplication = LoanApplicationDto.ToEntity(currentDto);

            if (editMode)
            {
                Logger.LogDebug("User submitted update for loan application ID: {LoanId}", loanApplication.Id);
                await LoanService.UpdateAsync(loanApplication, _cancellationTokenSource.Token);
            }
            else
            {
                Logger.LogDebug("User submitted new loan application for applicant: {ApplicantName}", loanApplication.ApplicantName);
                await LoanService.AddAsync(loanApplication, _cancellationTokenSource.Token);
            }
            showForm = false;
            await LoadLoans();
        }
        catch (OperationCanceledException)
        {
            Logger.LogDebug("Form submission operation was cancelled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing loan application form submission");
        }
    }

    private void CancelForm()
    {
        Logger.LogDebug("User cancelled loan application form");
        showForm = false;
    }

    public void Dispose()
    {
        Logger.LogDebug("Disposing Loan Applications component");
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
} 